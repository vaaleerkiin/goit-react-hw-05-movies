{"version":3,"file":"static/js/387.285dce62.chunk.js","mappings":"sMAEMA,EAAAA,WACJ,cAAe,eACbC,KAAKC,IAAM,mCACXD,KAAKE,SAAW,+BAChBF,KAAKG,cAAgB,uBACrBH,KAAKI,aAAe,gBACpBJ,KAAKK,cAAgB,UACrBL,KAAKM,cAAgB,4BACrBN,KAAKO,cAAgB,2BACtB,CAuCD,OAvCC,qEAED,6FACQC,EAAU,CAAEC,OAAQ,CAAEC,QAASV,KAAKC,MAD5C,SAEyBU,EAAAA,EAAAA,IAAA,UAClBX,KAAKE,UADa,OACFF,KAAKG,eACxBK,GAJJ,cAEQI,EAFR,yBAMSA,EAASC,KAAKC,SANvB,kGAFC,IAED,2DASA,WAAiBC,GAAjB,gFACQP,EAAU,CAAEC,OAAQ,CAAEC,QAASV,KAAKC,MAD5C,SAEyBU,EAAAA,EAAAA,IAAA,UAClBX,KAAKE,UADa,OACFF,KAAKK,eADH,OACmBU,GACxCP,GAJJ,cAEQI,EAFR,yBAOSA,EAASC,MAPlB,mGATA,IASA,wDAUA,WAAcE,GAAd,gFACQP,EAAU,CAAEC,OAAQ,CAAEC,QAASV,KAAKC,MAD5C,SAEyBU,EAAAA,EAAAA,IAAA,UAClBX,KAAKE,UADa,OACFF,KAAKK,eADH,OACmBU,EADnB,YAErBP,GAJJ,cAEQI,EAFR,yBAMSA,EAASC,MANlB,mGAVA,IAUA,2DAQA,WAAiBE,GAAjB,gFACQP,EAAU,CAAEC,OAAQ,CAAEC,QAASV,KAAKC,MAD5C,SAEyBU,EAAAA,EAAAA,IAAA,UAClBX,KAAKE,UADa,OACFF,KAAKK,eADH,OACmBU,EADnB,YAErBP,GAJJ,cAEQI,EAFR,yBAOSA,EAASC,MAPlB,mGARA,IAQA,0DAUA,WAAgBG,GAAhB,gFACQR,EAAU,CAAEC,OAAQ,CAAEC,QAASV,KAAKC,IAAKe,MAAAA,IADjD,SAEyBL,EAAAA,EAAAA,IAAA,UAClBX,KAAKE,UADa,OACFF,KAAKI,cACxBI,GAJJ,cAEQI,EAFR,yBAMSA,EAASC,MANlB,mGAVA,MAUA,EAhDId,GA0DN,K,8IC1DakB,E,QAAOC,EAAAA,GAAH,sM,mBCEXC,EAAY,IAAIN,EAAAA,EA8BtB,EA7BgB,WAAO,IAAD,EACpB,GAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGACEP,EAAUQ,WAAWJ,GADvB,OACVK,EADU,OAEhBN,EAAUM,GAFM,2CAAH,qDAIfF,GACD,GAAE,CAACH,KAGF,SAACN,EAAD,UACG,UAAAI,EAAOP,eAAP,SAAiB,GAChBO,EAAOP,QAAQe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACjB,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EADQ,KAOnB,kDAIP,C","sources":["API/feth.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass FetchData {\n  constructor() {\n    this.KEY = 'b3b4716df5187d0bc9138efc2668bc10';\n    this.BASE_URL = 'https://api.themoviedb.org/3';\n    this.popularMovies = '/trending/movie/week';\n    this.searchMovies = '/search/movie';\n    this.detailsMovies = '/movie/';\n    this.creditsMovies = '/movies/get-movie-credits';\n    this.reviewsMovies = '/movies/get-movie-reviews';\n  }\n\n  async getPopular() {\n    const options = { params: { api_key: this.KEY } };\n    const response = await axios.get(\n      `${this.BASE_URL}${this.popularMovies}`,\n      options\n    );\n    return response.data.results;\n  }\n\n  async getDetails(movie_id) {\n    const options = { params: { api_key: this.KEY } };\n    const response = await axios.get(\n      `${this.BASE_URL}${this.detailsMovies}${movie_id}`,\n      options\n    );\n\n    return response.data;\n  }\n\n  async getCast(movie_id) {\n    const options = { params: { api_key: this.KEY } };\n    const response = await axios.get(\n      `${this.BASE_URL}${this.detailsMovies}${movie_id}/credits`,\n      options\n    );\n    return response.data;\n  }\n  async getReviews(movie_id) {\n    const options = { params: { api_key: this.KEY } };\n    const response = await axios.get(\n      `${this.BASE_URL}${this.detailsMovies}${movie_id}/reviews`,\n      options\n    );\n\n    return response.data;\n  }\n\n  async getSearch(query) {\n    const options = { params: { api_key: this.KEY, query } };\n    const response = await axios.get(\n      `${this.BASE_URL}${this.searchMovies}`,\n      options\n    );\n    return response.data;\n  }\n}\n\nexport default FetchData;\n","import styled from '@emotion/styled';\n\nexport const Wrap = styled.ul`\n  margin-top: 24px;\n  padding: 24px;\n  display: flex;\n  flex-direction: column;\n\n  gap: 16px;\n  background-color: #f4a259;\n  border-radius: 5px;\n  overflow: hidden;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Wrap } from './Reviews.styled';\nimport data from 'API/feth';\nconst fetchData = new data();\nconst Reviews = () => {\n  const [movies, setMovies] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovies = async () => {\n      const res = await fetchData.getReviews(movieId);\n      setMovies(res);\n    };\n    getMovies();\n  }, [movieId]);\n\n  return (\n    <Wrap>\n      {movies.results?.[0] ? (\n        movies.results.map(({ id, author, content }) => (\n          <li key={id}>\n            <h2>{author}</h2>\n            <p>{content}</p>\n          </li>\n        ))\n      ) : (\n        <h3>There's nothing here</h3>\n      )}\n    </Wrap>\n  );\n};\n\nexport default Reviews;\n"],"names":["FetchData","this","KEY","BASE_URL","popularMovies","searchMovies","detailsMovies","creditsMovies","reviewsMovies","options","params","api_key","axios","response","data","results","movie_id","query","Wrap","styled","fetchData","useState","movies","setMovies","movieId","useParams","useEffect","getMovies","getReviews","res","map","id","author","content"],"sourceRoot":""}